class Solution(object):
    def intervalIntersection(self, A, B):
        """
        :type A: List[List[int]]
        :type B: List[List[int]]
        :rtype: List[List[int]]
        """
        ret=[]
        i=0
        j=0
        while(i<len(A) and j<len(B)):
            r=[]
            if(A[i][0]>=B[j][0] and A[i][0]<=B[j][1]):
                r.append(A[i][0])
                r.append(min(A[i][1],B[j][1]))
                ret.append(r)
            elif(A[i][0]<=B[j][0] and A[i][1]>=B[j][0]):
                r.append(B[j][0])
                r.append(min(A[i][1],B[j][1]))
                ret.append(r)
            elif(A[i][1]==B[j][0]):
                ret.append([A[i][1],A[i][1]])
            elif(B[j][1]==A[i][0]):
                ret.append([A[i][0],A[i][0]])
            if(A[i][1]<B[j][1]):
                i+=1
            else:
                j+=1
        return ret
